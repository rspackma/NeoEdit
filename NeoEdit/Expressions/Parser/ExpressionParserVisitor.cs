//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Dev\NeoEdit\Common\Expressions\Source\ExpressionParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NeoEdit.Expressions.Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public interface IExpressionParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] ExpressionParser.ExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LongForm</c>
	/// labeled alternative in <see cref="ExpressionParser.form"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLongForm([NotNull] ExpressionParser.LongFormContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ShortForm</c>
	/// labeled alternative in <see cref="ExpressionParser.form"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitShortForm([NotNull] ExpressionParser.ShortFormContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DefaultOpForm</c>
	/// labeled alternative in <see cref="ExpressionParser.form"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefaultOpForm([NotNull] ExpressionParser.DefaultOpFormContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdd([NotNull] ExpressionParser.AddContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Shift</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitShift([NotNull] ExpressionParser.ShiftContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NullCoalesce</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullCoalesce([NotNull] ExpressionParser.NullCoalesceContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Ternary</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTernary([NotNull] ExpressionParser.TernaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParens([NotNull] ExpressionParser.ParensContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Constant</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] ExpressionParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Dot</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDot([NotNull] ExpressionParser.DotContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelational([NotNull] ExpressionParser.RelationalContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Method</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMethod([NotNull] ExpressionParser.MethodContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Unary</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary([NotNull] ExpressionParser.UnaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOr([NotNull] ExpressionParser.LogicalOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Simple</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimple([NotNull] ExpressionParser.SimpleContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddUnits</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddUnits([NotNull] ExpressionParser.AddUnitsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnitConversion</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnitConversion([NotNull] ExpressionParser.UnitConversionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Mult</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMult([NotNull] ExpressionParser.MultContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitwiseXor</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseXor([NotNull] ExpressionParser.BitwiseXorContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitwiseOr</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseOr([NotNull] ExpressionParser.BitwiseOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAnd([NotNull] ExpressionParser.LogicalAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BitwiseAnd</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseAnd([NotNull] ExpressionParser.BitwiseAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnaryEnd</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryEnd([NotNull] ExpressionParser.UnaryEndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEquality([NotNull] ExpressionParser.EqualityContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Exp</c>
	/// labeled alternative in <see cref="ExpressionParser.e"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExp([NotNull] ExpressionParser.ExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitString([NotNull] ExpressionParser.StringContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>True</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTrue([NotNull] ExpressionParser.TrueContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>False</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFalse([NotNull] ExpressionParser.FalseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Null</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNull([NotNull] ExpressionParser.NullContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Integer</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInteger([NotNull] ExpressionParser.IntegerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloat([NotNull] ExpressionParser.FloatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Hex</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitHex([NotNull] ExpressionParser.HexContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] ExpressionParser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnitMult</c>
	/// labeled alternative in <see cref="ExpressionParser.units"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnitMult([NotNull] ExpressionParser.UnitMultContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnitSimple</c>
	/// labeled alternative in <see cref="ExpressionParser.units"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnitSimple([NotNull] ExpressionParser.UnitSimpleContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnitParen</c>
	/// labeled alternative in <see cref="ExpressionParser.units"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnitParen([NotNull] ExpressionParser.UnitParenContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>UnitExp</c>
	/// labeled alternative in <see cref="ExpressionParser.units"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnitExp([NotNull] ExpressionParser.UnitExpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnit([NotNull] ExpressionParser.UnitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.normalstring"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNormalstring([NotNull] ExpressionParser.NormalstringContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.strcontent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrcontent([NotNull] ExpressionParser.StrcontentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.strchars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrchars([NotNull] ExpressionParser.StrcharsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.strescape"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrescape([NotNull] ExpressionParser.StrescapeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.strunicode"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStrunicode([NotNull] ExpressionParser.StrunicodeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.verbatimstring"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVerbatimstring([NotNull] ExpressionParser.VerbatimstringContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.vstrcontent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVstrcontent([NotNull] ExpressionParser.VstrcontentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.vstrchars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVstrchars([NotNull] ExpressionParser.VstrcharsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.vstrquote"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVstrquote([NotNull] ExpressionParser.VstrquoteContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.interpolatedstring"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInterpolatedstring([NotNull] ExpressionParser.InterpolatedstringContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.istrcontent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIstrcontent([NotNull] ExpressionParser.IstrcontentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.istrchars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIstrchars([NotNull] ExpressionParser.IstrcharsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.istrliteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIstrliteral([NotNull] ExpressionParser.IstrliteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.istrinter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIstrinter([NotNull] ExpressionParser.IstrinterContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.verbatiminterpolatedstring"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVerbatiminterpolatedstring([NotNull] ExpressionParser.VerbatiminterpolatedstringContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.vistrcontent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVistrcontent([NotNull] ExpressionParser.VistrcontentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.vistrchars"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVistrchars([NotNull] ExpressionParser.VistrcharsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.vistrliteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVistrliteral([NotNull] ExpressionParser.VistrliteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionParser.vistrinter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVistrinter([NotNull] ExpressionParser.VistrinterContext context);
}
} // namespace NeoEdit.Common.Expressions.Parser
